type: edu
custom_name: stage4
files:
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage4Test;

    public class GameOfLifeTest extends GameOfLifeStage4Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    import java.io.IOException;
    import java.util.Random;
    import java.util.Scanner;

    public class Main {

        static class LifeGenerator {
            private final Random rndGenerator;
            private int aliveCount = 0;

            public int getAliveCount() {
                return aliveCount;
            }

            public LifeGenerator() {
                rndGenerator = new Random();
            }

            public char[][] initUniverseRnd(int size) {
                char[][] retUniverse = new char[size][size];
                for (int i = 0; i < size; i++) {
                    for (int j = 0; j < size; j++) {
                        if (rndGenerator.nextBoolean()) {
                            retUniverse[i][j] = 'O';
                            aliveCount++;
                        } else {
                            retUniverse[i][j] = ' ';
                        }
                    }
                }
                return retUniverse;
            }

            private int getNeighborCount(int i, int j, char[][] currentUniverse) {
                int size = currentUniverse.length;
                int neighborCounter = 0;
                //three upper neighbors
                if (i == 0) {       //for top line
                    if (currentUniverse[size - 1][j] == 'O') { neighborCounter++;} //top
                    if (j == 0) {                               //top-left
                        if (currentUniverse[size - 1][size - 1] == 'O') { neighborCounter++; }
                    } else {
                        if (currentUniverse[size - 1][j - 1] == 'O') { neighborCounter++; }
                    }
                    if (j == size - 1) {                    //top-right
                        if (currentUniverse[size - 1][0] == 'O') { neighborCounter++; }
                    } else {
                        if (currentUniverse[size - 1][j + 1] == 'O') { neighborCounter++; }
                    }
                } else {        //for non top lines
                    if (currentUniverse[i - 1][j] == 'O') { neighborCounter++;} //top
                    if (j == 0) {                           //top-left
                        if (currentUniverse[i - 1][size - 1] == 'O') { neighborCounter++; }
                    } else {
                        if (currentUniverse[i - 1][j - 1] == 'O') { neighborCounter++; }
                    }
                    if (j == size - 1) {                    //top-right
                        if (currentUniverse[i - 1][0] == 'O') { neighborCounter++; }
                    } else {
                        if (currentUniverse[i - 1][j + 1] == 'O') { neighborCounter++; }
                    }
                }
                //left neighbor
                if (j == 0) {
                    if (currentUniverse[i][size - 1] == 'O') { neighborCounter++; }
                } else {
                    if (currentUniverse[i][j - 1] == 'O') { neighborCounter++; }
                }
                // right neighbor
                if (j == size - 1) {
                    if (currentUniverse[i][0] == 'O') { neighborCounter++; }
                } else {
                    if (currentUniverse[i][j + 1] == 'O') { neighborCounter++; }
                }
                //three of the neighbors below
                if (i == size - 1) {       //for bottom line
                    if (currentUniverse[0][j] == 'O') { neighborCounter++;} //bottom
                    if (j == 0) {                               //bottom-left
                        if (currentUniverse[0][size - 1] == 'O') { neighborCounter++; }
                    } else {
                        if (currentUniverse[0][j - 1] == 'O') { neighborCounter++; }
                    }
                    if (j == size - 1) {                    //bottom-right
                        if (currentUniverse[0][0] == 'O') { neighborCounter++; }
                    } else {
                        if (currentUniverse[0][j + 1] == 'O') { neighborCounter++; }
                    }
                } else {        //for non bottom lines
                    if (currentUniverse[i + 1][j] == 'O') { neighborCounter++;} //bottom
                    if (j == 0) {                           //bottom-left
                        if (currentUniverse[i + 1][size - 1] == 'O') { neighborCounter++; }
                    } else {
                        if (currentUniverse[i + 1][j - 1] == 'O') { neighborCounter++; }
                    }
                    if (j == size - 1) {                    //bottom-right
                        if (currentUniverse[i + 1][0] == 'O') { neighborCounter++; }
                    } else {
                        if (currentUniverse[i + 1][j + 1] == 'O') { neighborCounter++; }
                    }
                }
                return neighborCounter;
            }

            public char[][] nextGeneration(int size, char[][] currentUniverse) {
                char[][] retUniverse = new char[size][size];
                int neighborCounter;
                aliveCount = 0;
                for (int i = 0; i < size; i++) {
                    for (int j = 0; j < size; j++) {
                        neighborCounter = getNeighborCount(i, j, currentUniverse);
                        if (neighborCounter < 2 || neighborCounter > 3) {
                            retUniverse[i][j] = ' ';
                        } else if (neighborCounter == 3) {
                            retUniverse[i][j] = 'O';
                            aliveCount++;
                        } else {
                            if (currentUniverse[i][j] == 'O') {aliveCount++;}
                            retUniverse[i][j] = currentUniverse[i][j];
                        }
                    }
                }
                return retUniverse;
            }
        }

        static class Universe {
            private char[][] evenUniverse;
            private char[][] oddUniverse;
            private final int universeSize;
            LifeGenerator lifeGenerator;
            private final int numGenerations;
            private int countGenerations;


            public Universe(int size, int numGens) {
                this.universeSize = size;
                this.numGenerations = numGens;
                evenUniverse = new char[universeSize][universeSize];
                oddUniverse = new char[universeSize][universeSize];
                lifeGenerator = new LifeGenerator();
                oddUniverse = lifeGenerator.initUniverseRnd(universeSize).clone();
                countGenerations = 1;
                print(oddUniverse);
            }

            public void liveUniverse() throws InterruptedException {
                for (int i = 0; i <= numGenerations; i++) {
                    Thread.sleep(1000);
                    if (countGenerations % 2 != 0) {
                        evenUniverse = lifeGenerator.nextGeneration(universeSize, oddUniverse).clone();
                        countGenerations++;
                        print(evenUniverse);
                    } else {
                        oddUniverse = lifeGenerator.nextGeneration(universeSize, evenUniverse).clone();
                        countGenerations++;
                        print(oddUniverse);
                    }
                }
            }

            private void print(char[][] currenUniverse) {
                clrscr();
                System.out.println("Generation #" + countGenerations);
                System.out.println("Alive #" + lifeGenerator.getAliveCount());
                for (int i = 0; i < universeSize; i++) {
                    for (int j = 0; j < universeSize; j++) {
                        System.out.print(currenUniverse[i][j]);
                    }
                    System.out.println();
                }
            }

            public static void clrscr(){
                try {
                    if (System.getProperty("os.name").contains("Windows"))
                        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
                    else
                        Runtime.getRuntime().exec("clear");
                } catch (IOException | InterruptedException ex) {}
            }

        }


        public static void main(String[] args) throws InterruptedException {
            Scanner scanner = new Scanner(System.in);
            int universeSize = scanner.nextInt();
            int numGenerations = 10;
            Universe universe = new Universe(universeSize, numGenerations);
            universe.liveUniverse();
        }
    }
  learner_created: false
- name: src/life/GameOfLife.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/298/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/54/stages/298/implement">JetBrains
    Academy</a>
  time: Sun, 28 Jun 2020 14:22:13 UTC
record: 4
